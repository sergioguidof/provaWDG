{"version":3,"sources":["images/react.png","services/api.js","pages/main/index.js","pages/user/index.js","pages/login/index.js","pages/error404/index.js","routes.js","components/header/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","api","axios","create","baseURL","Main","state","users","listInfo","page","isLoading","loadUsers","_callee","paramsString","params","response","_response$data","data","_args","arguments","regenerator_default","a","wrap","_context","prev","next","length","undefined","_this","props","location","search","URLSearchParams","get","concat","sent","Object","objectWithoutProperties","setState","stop","prevPage","pageNumber","nextPage","_this$state","total_pages","this","id","window","confirm","delete","then","resp","status","alert","_this2","_this$state2","react_default","createElement","className","role","map","user","key","src","avatar","alt","first_name","last_name","react_router_dom","to","onClick","deleteUser","href","disabled","Component","User","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","sucesso","handleSubmit","bind","assertThisInitialized","match","event","preventDefault","value","updateUser","put","updatedAt","onSubmit","htmlFor","type","placeholder","ref","input","defaultValue","Login","username","password","submitted","error","handleChange","e","_e$target","target","name","defineProperty","returnUrl","post","loading","console","log","token","defaults","headers","common","_ref","from","pathname","history","push","onChange","Error404","Routes","react_router","exact","path","component","Header","logo","width","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","header","routes","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75dc20eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react.580ffd26.png\";","import axios from 'axios';\r\n\r\nconst api = axios.create({ \r\n    baseURL: 'https://reqres.in/api'\r\n});\r\n\r\nexport default api;","import React, { Component } from 'react';\r\nimport api from '../../services/api';\r\nimport \"./styles.css\";\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Main extends Component {\r\n    state = {\r\n        users: [],\r\n        listInfo: {},\r\n        page: 1,\r\n        isLoading: true,\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadUsers();\r\n    }\r\n\r\n    loadUsers = async (page = 1) => {\r\n        if(typeof this.props.location.search != 'undefined') {\r\n            const paramsString = this.props.location.search;\r\n            const params = new URLSearchParams(paramsString);\r\n            page = params.get('page');\r\n        }\r\n\r\n        const response = await api.get(`/users?page=${page}&delay=2`);\r\n\r\n        const { data, ...listInfo } = response.data\r\n\r\n        this.setState({ users: data, listInfo, page, isLoading: false });\r\n    };\r\n\r\n    async deleteUser(id) {\r\n\r\n        this.setState({ isLoading: true });\r\n\r\n        var verification = window.confirm(\"Deseja mesmo excluir esse usuário?\");\r\n\r\n        if(verification) {\r\n            const response = await api.delete(`/users/${id}?delay=2`).then(resp => resp.status);\r\n            \r\n            if(response == 204) {\r\n                alert(\"Usuário excluído com sucesso!\");\r\n            }\r\n        } else {\r\n            alert(\"Exclusão cancelada.\");   \r\n        }\r\n\r\n        this.setState({ isLoading: false });\r\n    };\r\n\r\n    prevPage = () => {\r\n        this.setState({isLoading: true});\r\n\r\n        const { page } = this.state;\r\n\r\n        if (page === 1) return;\r\n\r\n        const pageNumber = page - 1;\r\n\r\n        this.loadUsers(pageNumber)\r\n    }\r\n\r\n    nextPage = () => {\r\n        this.setState({isLoading: true});\r\n\r\n        const { page, listInfo } = this.state;\r\n\r\n        if (page === listInfo.total_pages) return;\r\n\r\n        const pageNumber = page + 1;\r\n\r\n        this.loadUsers(pageNumber)\r\n    }\r\n    \r\n    render() {\r\n        const { users, page, listInfo, isLoading } = this.state;\r\n\r\n        if(isLoading) {\r\n            return(\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">Usuários</h5>\r\n                        <div className=\"text-center align-middle\">\r\n                            <div className=\"spinner-border align-middle\" role=\"status\">\r\n                                <span className=\"sr-only align-middle\">Loading...</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Usuários</h5>\r\n                    <div className=\"users-list\">\r\n                        {users.map(user => (\r\n                            <div className=\"row mt-3\" key={user.id}>\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"media\">\r\n                                        <img src={user.avatar} className=\"mr-3\" alt={user.first_name} />\r\n                                        <div className=\"media-body\">\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-md-10\">\r\n                                                    <h5 className=\"mt-0\">{user.first_name}</h5>\r\n                                                    {user.last_name}\r\n                                                </div>\r\n\r\n                                                <div className=\"col-md-2\">\r\n                                                    <Link className=\"btn btn-primary text-light mr-2\" to={`/users/${user.id}`}>Editar</Link>\r\n                                                    <a className=\"btn btn-danger text-light\" onClick={() => this.deleteUser(user.id)}>Excluir</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <ul className=\"pagination justify-content-center\">\r\n                        <li className=\"page-item\">\r\n                            <a className=\"page-link\" href=\"#\" onClick={this.prevPage} disabled={page === 1}>Anterior</a>\r\n                        </li>\r\n                        <li className=\"page-item\">\r\n                            <a className=\"page-link\" href=\"#\" onClick={this.nextPage} disabled={page === listInfo.total_pages}>Próxima</a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div> \r\n        ) \r\n    }\r\n}","import React, { Component } from 'react';\r\nimport api from '../../services/api';\r\n\r\nexport default class User extends Component {\r\n    constructor() {\r\n        super();\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    state = {\r\n        user: {},\r\n        isLoading: true,\r\n        sucesso: {},\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n\r\n        const response = await api.get(`/users/${id}?delay=2`);\r\n\r\n        this.setState({ user: response.data.data, isLoading: false });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        const first_name  = this.first_name.value;\r\n        const last_name   = this.last_name.value;\r\n\r\n        const data = {\r\n            first_name,\r\n            last_name\r\n        }\r\n\r\n        this.updateUser(data);\r\n    }\r\n\r\n    async updateUser(data) {\r\n        const{ id } = this.props.match.params;\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n        });\r\n\r\n        const response = await api.put(`/users/${id}?delay=2`, {data}).then(resp => resp.data);\r\n\r\n        this.setState({ isLoading: false, user: data, sucesso: response });\r\n\r\n        if(this.state.sucesso.updatedAt) {\r\n            alert(\"Usuário Atualizado com sucesso\");\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const { user, isLoading, sucesso } = this.state;\r\n\r\n        if(isLoading) {\r\n            return(\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">Usuários</h5>\r\n                        <div className=\"text-center align-middle\">\r\n                            <div className=\"spinner-border align-middle\" role=\"status\">\r\n                                <span className=\"sr-only align-middle\">Loading...</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Editar Usuário</h5>\r\n                    <div className=\"user-info\">\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"name\">Nome</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"fisrtName\" placeholder=\"Digite o nome do usuário\" ref={(input) => this.first_name = input} defaultValue={user.first_name}/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"lastName\">Sobrenome</label>\r\n                                <input type=\"text\" className=\"form-control\" id=\"lastName\" placeholder=\"Digite o sobrenome do usuário\" ref={(input) => this.last_name = input} defaultValue={user.last_name}/>\r\n                            </div>\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Atualizar</button>\r\n                        </form> \r\n                    </div>    \r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport api from '../../services/api';\r\n\r\nexport default class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            submitted: false,\r\n            isLoading: false,\r\n            error: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    async handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        this.setState({ submitted: true });\r\n        const { username, password, returnUrl } = this.state;\r\n\r\n        // stop here if form is invalid\r\n        if (!(username && password)) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ isLoading: true });\r\n\r\n        const response = await api.post(`/login?delay=2`, {username, password}).then(\r\n            resp => resp.data,\r\n            error => this.setState({ error, loading: false })\r\n        );\r\n\r\n        console.log(response.token);\r\n        api.defaults.headers.common['Authorization'] = `bearer ${response.key}`;\r\n\r\n        if(typeof response.token != \"undefined\") {\r\n            const { from } = this.props.location.state || { from: { pathname: \"/users\" } };\r\n            console.log(from);\r\n            this.props.history.push(from);\r\n        } \r\n    }\r\n\r\n    render() {\r\n        const { username, password, submitted, isLoading, error } = this.state;\r\n\r\n        if(isLoading) {\r\n            return(\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">Usuários</h5>\r\n                        <div className=\"text-center align-middle\">\r\n                            <div className=\"spinner-border align-middle\" role=\"status\">\r\n                                <span className=\"sr-only align-middle\">Loading...</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Login</h5>\r\n                    <form name=\"form\" onSubmit={this.handleSubmit}>\r\n                        <div className={'form-group' + (submitted && !username ? ' has-error' : '')}>\r\n                            <label htmlFor=\"username\">Usuário</label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"username\" value={username} onChange={this.handleChange} />\r\n                            {submitted && !username &&\r\n                                <div className=\"help-block\">Digite um usuário</div>\r\n                            }\r\n                        </div>\r\n                        <div className={'form-group' + (submitted && !password ? ' has-error' : '')}>\r\n                            <label htmlFor=\"password\">Senha</label>\r\n                            <input type=\"password\" className=\"form-control\" name=\"password\" value={password} onChange={this.handleChange} />\r\n                            {submitted && !password &&\r\n                                <div className=\"help-block\">Digite uma senha</div>\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <button className=\"btn btn-primary\" disabled={isLoading}>Login</button>\r\n                        </div>\r\n                        {error &&\r\n                            <div className={'alert alert-danger'}>{error}</div>\r\n                        }\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nconst Error404 = () => (\r\n    <div className=\"card\">\r\n        <div className=\"card-body\">\r\n            <h1 className=\"card-title\">404</h1>\r\n            <h3>Página não encontrada.</h3>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Error404;","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport Main from './pages/main';\r\nimport User from './pages/user';\r\nimport Login from './pages/login';\r\nimport Error404 from './pages/error404';\r\n\r\nconst Routes = () => (\r\n    <BrowserRouter>\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Login} />\r\n        <Route exact path=\"/login\" component={Login} />\r\n        <Route exact path=\"/users\" component={Main} />\r\n        <Route path=\"/users/:id\" component={User} />\r\n        <Route component={Error404} />\r\n    </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Routes;","import React from 'react';\r\nimport \"./styles.css\";\r\nimport logo from '../../images/react.png'\r\n\r\nconst Header = () => (\r\n    <header>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <a className=\"navbar-brand\" href=\"/users\">\r\n                <img src={logo} width=\"50\"/>\r\n            </a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item active\">\r\n                        <a className=\"nav-link\" href=\"/users\">Home <span className=\"sr-only\">(current)</span></a>\r\n                    </li>\r\n                </ul>\r\n            </div>  \r\n        </nav>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport Routes from './routes';\nimport Main from './pages/main';\n\nimport './styles.css';\nimport Header from './components/header';\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <div className=\"container-fluid\">\n      <Routes />\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}